#Author: Stephanie M. Ortland
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime,timedelta
import sys, os
import matplotlib.dates as md
import matplotlib.gridspec as gridspec

#Using data from testing, this file makes a performance diagram, attribute diagram, and a figure with stacked plots for stats in each region per month. 
if __name__ == "__main__":
    #Set these
    rootsavedir = '/ships19/grain/convective_init/stats/TC_CHs_02_05_13_15/'
    performance_diagram = False
    attribute_diagram = False
    month_diagram = True

    #Get these from testing
    bins_att = np.arange(0, 1, .05)
    thresholds_perf = np.arange(10, 100, 10)

    #Original
    # POD = np.array([0.9384796023368835, 0.9274905920028687, 0.9149618148803711, 0.9005714058876038, 0.883647084236145, 0.8646973967552185, 0.8420913219451904, 0.8180868625640869, 0.7911777496337891])
    # SR = np.array([0.14577847719192505, 0.15611141920089722, 0.16725635528564453, 0.17934966087341309, 0.1929255723953247, 0.2074001431465149, 0.22407275438308716, 0.241196870803833, 0.2596730589866638])
    # CSI = np.array([0.14439859986305237, 0.1542290896177292, 0.1646960824728012, 0.17586730420589447, 0.18814609944820404, 0.2008810192346573, 0.21503731608390808, 0.2289191633462906, 0.24301724135875702])
    # CEF = np.array([0.003106122137978673, 0.019125087186694145, 0.02115338109433651, 0.023130223155021667, 0.025360384956002235,
    #                 0.027912616729736328, 0.03058963641524315, 0.0335102453827858, 0.0366612933576107, 0.0400877520442009,
    #                 0.044001173228025436, 0.048220597207546234, 0.05260723456740379, 0.05743853747844696, 0.06285157799720764, 0.0683758333325386, 0.07460444420576096, 0.0813901349902153, 0.08952753990888596, 0.11232685297727585])
    # noRES = 0.04016367346048355

    # ####5km buffer
    # POD = np.array([0.8157914280891418, 0.7894154191017151, 0.7612277865409851, 0.730655312538147, 0.6968989372253418, 0.6613866090774536, 0.6223157048225403, 0.5839992165565491, 0.5442318916320801])
    # SR = np.array([0.4780636429786682, 0.5012663006782532, 0.5249670147895813, 0.5489500761032104, 0.5740090608596802, 0.5984641909599304, 0.6247100830078125, 0.6495647430419922, 0.6738678812980652])
    # CSI = np.array([0.43148544430732727, 0.4421437680721283, 0.4507451057434082, 0.45655983686447144, 0.4593348503112793, 0.458102285861969, 0.4529716372489929, 0.4440845847129822, 0.4307703673839569])
    # CEF = np.array([0.03559491038322449, 0.18061967194080353, 0.1946457177400589, 0.20628654956817627, 0.2184479832649231,
    #                 0.23359020054340363, 0.24902188777923584, 0.264691025018692, 0.2802661061286926, 0.2972204089164734,
    #                 0.3162948489189148, 0.3356698453426361, 0.35074058175086975, 0.36656349897384644, 0.38511839509010315,
    #                 0.40468207001686096, 0.42420095205307007, 0.44555529952049255, 0.4718160033226013, 0.5116713047027588])
    # noRES = 0.15152046084403992

    # # ####7km buffer
    POD = np.array([0.7763099670410156, 0.7465125322341919, 0.7152206897735596, 0.6818205118179321, 0.6455731987953186, 0.6081417798995972, 0.5677459836006165, 0.5288825631141663, 0.4892392158508301])
    SR = np.array([0.5617376565933228, 0.5853179693222046, 0.6090448498725891, 0.6325316429138184, 0.6565779447555542, 0.6794843673706055, 0.7037423849105835, 0.7263757586479187, 0.7480039596557617])
    CSI = np.array([0.4834805428981781, 0.4882728159427643, 0.49017566442489624, 0.4883742332458496, 0.48261168599128723, 0.47257694602012634, 0.4582267999649048, 0.44101884961128235, 0.42001256346702576])
    CEF = np.array([0.053592655807733536, 0.25546568632125854, 0.27277982234954834, 0.28648215532302856, 0.3006831407546997, 0.3189091682434082,
                    0.33739718794822693, 0.3555825352668762, 0.3734145760536194, 0.3922698497772217, 0.4135071337223053, 0.4350215792655945,
                    0.4501194953918457, 0.46556341648101807, 0.484457403421402, 0.5045574903488159, 0.5244489908218384, 0.5461808443069458, 0.5732213854789734, 0.6061955690383911])
    noRES = 0.18709541857242584
    months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

    #oconus
    oconus_csi_20 = [0.4257119297981262, 0.5016628503799438, 0.5251977443695068, 0.48236608505249023, 0.5372257828712463, 0.4927959144115448,
                     0.517845630645752, 0.52305006980896, 0.49829766154289246, 0.46194231510162354, 0.4292842447757721, 0.44037124514579773]
    oconus_acc = [0.8916343450546265, 0.8666518926620483, 0.8970605731010437, 0.8827276229858398, 0.8793655037879944, 0.8590388894081116,
                  0.8703746795654297, 0.8702048659324646, 0.8584615588188171, 0.8534260988235474, 0.8763582110404968, 0.8592137098312378]
    oconus_prec = [0.5309245586395264, 0.6378970146179199, 0.7232168912887573, 0.6400113701820374, 0.7087119221687317, 0.6594398617744446,
                   0.7105589509010315, 0.7233792543411255, 0.6690899133682251, 0.6073089241981506, 0.5851486921310425, 0.6060400605201721]
    oconus_rec = [0.7236054539680481, 0.7240731120109558, 0.65433269739151, 0.6468304991722107, 0.6792537569999695, 0.6435469388961792,
                  0.6218463182449341, 0.603810727596283, 0.6231904029846191, 0.65492182970047, 0.5793741941452026, 0.5969768166542053]
    oconus_spec = [0.9141881465911865, 0.9009954333305359, 0.947727382183075, 0.9288560152053833, 0.9297322034835815, 0.9144852161407471,
                   0.9345704317092896, 0.9397347569465637, 0.9197330474853516, 0.9002047181129456, 0.9282410740852356, 0.9159860014915466]

    #east_north_central
    east_north_central_months = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    east_north_central_csi_20 = [0.0021946860942989588, 0.3696924149990082, 0.4373340308666229, 0.44101494550704956, 0.48655179142951965, 0.4924739599227905,
                                 0.5243070721626282, 0.4033714532852173, 0.4033714532852173, 0.40448853373527527, 0.40448853373527527]
    east_north_central_acc = [0.9268603324890137, 0.8433791995048523, 0.8972024917602539, 0.8950326442718506, 0.891612708568573, 0.891649603843689,
                              0.8859261870384216, 0.8728570938110352, 0.8728570938110352, 0.8142014145851135, 0.8142014145851135]
    east_north_central_prec = [0.0, 0.530325710773468, 0.606422483921051, 0.6366315484046936, 0.6795934438705444, 0.6709721684455872,
                               0.6941528916358948, 0.5646174550056458, 0.5646174550056458, 0.5595798492431641, 0.5595798492431641]
    east_north_central_rec = [0.0, 0.5096706748008728, 0.6300526261329651, 0.5731729865074158, 0.6164243221282959, 0.6440249681472778,
                              0.6820513010025024, 0.6064967513084412, 0.6064967513084412, 0.6499072313308716, 0.6499072313308716]
    east_north_central_spec = [0.972119927406311, 0.9099521040916443, 0.9378234148025513, 0.9470886588096619, 0.9443279504776001, 0.9392683506011963,
                               0.932034969329834, 0.9189935326576233, 0.9189935326576233, 0.8593705892562866, 0.8593705892562866]

    #central
    central_csi_20 = [0.37490031123161316, 0.36676597595214844, 0.47214794158935547, 0.4165976941585541, 0.465041846036911,
                      0.5107435584068298, 0.5228890180587769, 0.5333503484725952, 0.482658714056015, 0.4983122646808624, 0.30392929911613464, 0.482658714056015]
    central_acc = [0.796364426612854, 0.8043376207351685, 0.8358714580535889, 0.8567572832107544, 0.8588597178459167,
                   0.8750554919242859, 0.8712283372879028, 0.8877135515213013, 0.8367051482200623, 0.8629328608512878, 0.8372851610183716, 0.8367051482200623]
    central_prec = [0.4936700165271759, 0.48326027393341064, 0.6225184798240662, 0.595511794090271, 0.6722809672355652,
                    0.6884375810623169, 0.7300236821174622, 0.7183517813682556, 0.6483738422393799, 0.6936034560203552, 0.43704578280448914, 0.6483738422393799]
    central_rec = [0.6532397270202637, 0.6419761776924133, 0.6788226962089539, 0.571245014667511, 0.5752572417259216,
                   0.6513558030128479, 0.6075425744056702, 0.6537983417510986, 0.6609565615653992, 0.6088550090789795, 0.45795169472694397, 0.6609565615653992]
    central_spec = [0.8322083950042725, 0.8417640328407288, 0.8811984062194824, 0.9174796938896179, 0.9298276901245117,
                    0.9289631843566895, 0.9407565593719482, 0.9412888884544373, 0.8904282450675964, 0.9295165538787842, 0.9009687304496765, 0.8904282450675964]

    #west
    west_months = [6, 7, 8, 9, 10]
    west_csi_20 = [0.5163066387176514, 0.4937910735607147, 0.5280427932739258, 0.5011900067329407, 0.5571417808532715]
    west_acc = [0.9087311029434204, 0.895359456539154, 0.9025440812110901, 0.9043805003166199, 0.8771636486053467]
    west_prec = [0.7656417489051819, 0.7152762413024902, 0.7267779111862183, 0.7922638654708862, 0.7435381412506104]
    west_rec = [0.5647591352462769, 0.5701850652694702, 0.6271889805793762, 0.5106595754623413, 0.6602954864501953]
    west_spec = [0.9694730639457703, 0.9569856524467468, 0.9550445675849915, 0.9757339358329773, 0.9370787143707275]

    #west_north_central
    west_north_central_months = [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    west_north_central_csi_20 = [0.1358584463596344, 0.3373591899871826, 0.4138737618923187, 0.45829224586486816, 0.48245498538017273, 0.5116358399391174,
                                 0.4942181408405304, 0.4442586600780487, 0.4108591675758362, 0.12456852942705154, 0.39923158288002014]
    west_north_central_acc = [0.9187244772911072, 0.7797534465789795, 0.8578662872314453, 0.8770813345909119, 0.8948203325271606, 0.8943914771080017,
                              0.9033176898956299, 0.8706073760986328, 0.802035391330719, 0.8799153566360474, 0.8501640558242798]
    west_north_central_prec = [0.2651973068714142, 0.45515304803848267, 0.518345832824707, 0.5878915190696716, 0.6453526616096497, 0.6845889091491699,
                               0.6770305037498474, 0.5826655626296997, 0.5333917140960693, 0.16542504727840424, 0.5733842253684998]
    west_north_central_rec = [0.14721167087554932, 0.5611532926559448, 0.7733842134475708, 0.7049598693847656, 0.6506908535957336, 0.657564640045166,
                              0.6342794895172119, 0.6511368155479431, 0.6693251729011536, 0.39661136269569397, 0.5334643721580505]
    west_north_central_spec = [0.9718912839889526, 0.8338295817375183, 0.8728176355361938, 0.9088344573974609, 0.9374943971633911, 0.9407262206077576,
                               0.948822557926178, 0.9120128750801086, 0.8386139869689941, 0.9032777547836304, 0.9166607856750488]

    #northeast
    northeast_csi_20 = [0.028409939259290695, 0.3594645857810974, 0.40178433060646057, 0.43652477860450745, 0.46290379762649536, 0.5061695575714111,
                        0.47866103053092957, 0.4519904553890228, 0.46052154898643494, 0.39753955602645874, 0.28557437658309937, 0.253862589597702]
    northeast_acc = [0.9215180277824402, 0.8685258626937866, 0.8217343688011169, 0.8955861330032349, 0.8845951557159424, 0.8918107748031616,
                     0.8887274265289307, 0.8923413753509521, 0.8759222626686096, 0.8688554763793945, 0.7697043418884277, 0.8515146374702454]
    northeast_prec = [0.049438200891017914, 0.5419132709503174, 0.5458279848098755, 0.6507392525672913, 0.7066745162010193, 0.6909528970718384,
                      0.658325731754303, 0.6506625413894653, 0.614149272441864, 0.5942898392677307, 0.4116939902305603, 0.4374137818813324]
    northeast_rec = [0.006081921514123678, 0.481584370136261, 0.61490398645401, 0.5783838033676147, 0.5456371903419495, 0.6550285816192627,
                     0.6361485719680786, 0.5731905102729797, 0.662834107875824, 0.5387231111526489, 0.4378449022769928, 0.40495577454566956]
    northeast_spec = [0.9911102056503296, 0.932594895362854, 0.8730521202087402, 0.9483566880226135, 0.9537755846977234, 0.9401670694351196,
                      0.9369563460350037, 0.9471502900123596, 0.9179213643074036, 0.9308909177780151, 0.8495194911956787, 0.9200566411018372]

    #northwest
    northwest_months = [5, 6, 7, 8, 9, 10]
    northwest_csi_20 = [0.33593955636024475, 0.45404189825057983, 0.5695699453353882, 0.4864611327648163, 0.38542893528938293, 0.5144777297973633]
    northwest_acc = [0.8877636790275574, 0.9137498736381531, 0.8933011889457703, 0.8581936955451965, 0.9183291792869568, 0.8873828053474426]
    northwest_prec = [0.6458768248558044, 0.7068730592727661, 0.8250072002410889, 0.665802001953125, 0.6538718342781067, 0.741758406162262]
    northwest_rec = [0.3605506718158722, 0.5098251104354858, 0.5749796628952026, 0.6248512864112854, 0.44769689440727234, 0.5019156336784363]
    northwest_spec = [0.9693924784660339, 0.9703666567802429, 0.9704440832138062, 0.9186878800392151, 0.9726476669311523, 0.9648723006248474]

    #south
    south_csi_20 = [0.4615270793437958, 0.42162439227104187, 0.4648785889148712, 0.4811410903930664, 0.49716100096702576, 0.5107859969139099,
                    0.528182864189148, 0.5234668254852295, 0.5176248550415039, 0.535588264465332, 0.5287443995475769, 0.5287443995475769]
    south_acc = [0.8385557532310486, 0.8419456481933594, 0.8589550256729126, 0.8560997843742371, 0.8749319314956665, 0.876387894153595,
                 0.8869470357894897, 0.8854773640632629, 0.888421893119812, 0.892281174659729, 0.882775604724884, 0.882775604724884]
    south_prec = [0.6140397191047668, 0.5513142943382263, 0.6119301915168762, 0.6122996807098389, 0.6328438520431519, 0.6700791716575623,
                  0.7044764161109924, 0.7016927003860474, 0.6832438111305237, 0.6954289078712463, 0.6833460927009583, 0.6833460927009583]
    south_rec = [0.6568746566772461, 0.6694368720054626, 0.6919671893119812, 0.7316029071807861, 0.7244614958763123, 0.6704933047294617,
                 0.6533268690109253, 0.6499544382095337, 0.6544877886772156, 0.6909692883491516, 0.6997290253639221, 0.6997290253639221]
    south_spec = [0.8878881335258484, 0.8799558281898499, 0.8978328704833984, 0.8865812420845032, 0.9079026579856873, 0.9238694906234741,
                  0.938970148563385, 0.93817538022995, 0.9369964003562927, 0.9353131651878357, 0.9250737428665161, 0.9250737428665161]

    #southeast
    southeast_csi_20 = [0.40859073400497437, 0.49431827664375305, 0.45908892154693604, 0.49903568625450134, 0.3731387257575989, 0.4935092628002167,
                        0.5026493668556213, 0.5056401491165161, 0.46061623096466064, 0.4284280836582184, 0.3731387257575989, 0.4416014850139618]
    southeast_acc = [0.8306241631507874, 0.8649258017539978, 0.8509562611579895, 0.8609517812728882, 0.8673876523971558, 0.8540223836898804,
                     0.8651923537254333, 0.8666500449180603, 0.857775866985321, 0.8566576838493347, 0.8673876523971558, 0.8585633635520935]
    southeast_prec = [0.5551663041114807, 0.6604705452919006, 0.5949912667274475, 0.6379294395446777, 0.5913423299789429, 0.6603283882141113,
                      0.6738185286521912, 0.6904415488243103, 0.6231366395950317, 0.5801525712013245, 0.5913423299789429, 0.6240381002426147]
    southeast_rec = [0.593009889125824, 0.6608460545539856, 0.6944413781166077, 0.7265163660049438, 0.4552878737449646,  0.6392470598220825,
                     0.6439678072929382, 0.6228809356689453, 0.6181430816650391, 0.623867928981781, 0.4552878737449646, 0.6035256385803223]
    southeast_spec = [0.8870885372161865, 0.9156168103218079, 0.8880301713943481, 0.8951388597488403,  0.9425864219665527, 0.9116975665092468,
                      0.9211496710777283, 0.9287997484207153, 0.9133307337760925, 0.9054226875305176, 0.9425864219665527, 0.9168712496757507]

    #southwest
    southwest_months = [3, 4, 5, 6, 7, 8, 9, 10, 12]
    southwest_csi_20 = [0.37542974948883057, 0.45851603150367737, 0.49116840958595276, 0.4950069785118103, 0.5133355855941772, 0.500012993812561,
                        0.49082115292549133, 0.5067168474197388, 0.4134683907032013]
    southwest_acc = [0.9181461334228516, 0.8844677805900574, 0.876069188117981, 0.8882589340209961, 0.8674284815788269, 0.869154155254364,
                     0.8815187811851501, 0.8601640462875366, 0.8698828220367432]
    southwest_prec = [0.5870079398155212, 0.6432914137840271, 0.6335635781288147, 0.6850636005401611, 0.6771019697189331, 0.67326819896698,
                      0.6810857653617859, 0.6710963249206543, 0.515498161315918]
    southwest_rec = [0.5495272874832153, 0.5997175574302673, 0.7188786864280701, 0.6203830242156982, 0.6629157066345215, 0.6377424001693726,
                     0.6047313809394836, 0.6547800898551941, 0.6406211853027344]
    southwest_spec = [0.9580974578857422, 0.937761127948761, 0.9100687503814697, 0.9423792958259583, 0.919503390789032, 0.925133228302002,
                      0.9400851130485535, 0.9147347211837769, 0.9057646989822388]

    dict_of_vals = {'accuracy':{'northwest':northwest_acc, 'west':west_acc, 'west_north_central':west_north_central_acc,
                                'southwest':southwest_acc, 'east_north_central':east_north_central_acc, 'south':south_acc,
                                'southeast':southeast_acc, 'central':central_acc, 'northeast':northeast_acc, 'oconus':oconus_acc},
                    'precision':{'northwest':northwest_prec, 'west':west_prec, 'west_north_central':west_north_central_prec,
                                'southwest':southwest_prec, 'east_north_central':east_north_central_prec, 'south':south_prec,
                                'southeast':southeast_prec, 'central':central_prec, 'northeast':northeast_prec, 'oconus':oconus_prec},
                    'recall':{'northwest':northwest_rec, 'west':west_rec, 'west_north_central':west_north_central_rec,
                                'southwest':southwest_rec, 'east_north_central':east_north_central_rec, 'south':south_rec,
                                'southeast':southeast_rec, 'central':central_rec, 'northeast':northeast_rec, 'oconus':oconus_rec},
                    'specificity':{'northwest':northwest_spec, 'west':west_spec, 'west_north_central':west_north_central_spec,
                                'southwest':southwest_spec, 'east_north_central':east_north_central_spec, 'south':south_spec,
                                'southeast':southeast_spec, 'central':central_spec, 'northeast':northeast_spec, 'oconus':oconus_spec},
                    'csi':{'northwest':northwest_csi_20, 'west':west_csi_20, 'west_north_central':west_north_central_csi_20,
                                'southwest':southwest_csi_20, 'east_north_central':east_north_central_csi_20, 'south':south_csi_20,
                                'southeast':southeast_csi_20, 'central':central_csi_20, 'northeast':northeast_csi_20, 'oconus':oconus_csi_20},
                    'months':{'northwest':northwest_months, 'west':west_months, 'west_north_central':west_north_central_months,
                                'southwest':southwest_months, 'east_north_central':east_north_central_months, 'south':months,
                                'southeast':months, 'central':months, 'northeast':months, 'oconus':months},
                    'colors':{'northwest':'tab:red', 'west':'tab:brown', 'west_north_central':'tab:orange',
                                'southwest':'tab:green', 'east_north_central':'tab:purple', 'south':'tab:blue',
                                'southeast':'tab:pink', 'central':'tab:olive', 'northeast':'tab:cyan', 'oconus':'tab:gray'}}

    if performance_diagram:
        ##Initial plot formatting
        fig_width_cm = 20
        fig_height_cm = 20
        inches_per_cm = 1 / 2.54  # Convert cm to inches
        fig_width = fig_width_cm * inches_per_cm  # width in inches
        fig_height = fig_height_cm * inches_per_cm  # height in inches
        fig_size = [fig_width, fig_height]
        fig, ax = plt.subplots(figsize=fig_size)
        line = ax.plot(SR, POD, zorder=1, c='black')
        points = ax.scatter(SR, POD, s=150, c=CSI, vmin=0.4, vmax=0.5, cmap='plasma', zorder=2, edgecolors='k', linewidths=1.0)
        plt.xlim(0.15, 0.95)
        plt.ylim(0, 1)
        for i, txt in enumerate(thresholds_perf):
            plt.annotate(txt, (SR[i], POD[i]), xytext=(SR[i]+10, POD[i]+10), textcoords='offset points', ha='center', va='center', size=12)
        cbar = plt.colorbar(points, orientation='vertical', pad=0.01, extendfrac=0, drawedges=0, ax=ax, ticks=np.arange(0, 1, 0.02))
                            #ticks=np.arange(0, 1, 0.1))
        cbar.ax.tick_params(labelsize=10)
        cbar.set_label('Critical Success Index', fontsize=12)

        plt.xlim(0, 1)
        plt.ylim(0, 1)
        plt.grid()
        ax.set_ylabel('Probability of Detection (POD)', fontsize=12)
        ax.set_xlabel('Success Ratio (1-FAR)', fontsize=12)
        plt.setp(ax.get_xticklabels(), fontsize=10)
        plt.setp(ax.get_yticklabels(), fontsize=10)
        figure_path = rootsavedir + 'performance_diagram.png'
        plt.savefig(figure_path, bbox_inches='tight', dpi=200)
        plt.close()
        print('plotted performance diagram at:', figure_path)
    if attribute_diagram:
        ##Initial plot formatting
        fig_width_cm = 20
        fig_height_cm = 20
        inches_per_cm = 1 / 2.54  # Convert cm to inches
        fig_width = fig_width_cm * inches_per_cm  # width in inches
        fig_height = fig_height_cm * inches_per_cm  # height in inches
        fig_size = [fig_width, fig_height]
        fig, ax = plt.subplots(figsize=fig_size)
        x = np.arange(0, 1.05, 0.1)
        y = x
        #line = ax.plot(precision, threshold, c='tb:red')
        line2 = ax.plot(x, y, ls='--', c='tab:gray')
        y2 = []
        for i in x:
            y2.append(noRES)
        line3 = ax.plot(x, y2, ls='--', c='tab:gray')
        y3 = (y + np.array(y2))/2
        y4 = np.arange(0, 1.05, 0.1)
        x4 = []
        for i in y4:
            x4.append(noRES)
        line4 = ax.plot(x, y3, ls='--', c='tab:gray')
        line5 = ax.plot(x4, y4, ls='--', c='tab:gray')
        att = ax.plot(bins_att, CEF)
        ax.set_ylabel('Conditional Event Frequency', fontsize=12)
        ax.set_xlabel('Forecast Probability', fontsize=12)
        plt.xlim(0, 1)
        plt.ylim(0, 1)
        plt.grid()
        plt.setp(ax.get_xticklabels(), fontsize=10)
        plt.setp(ax.get_yticklabels(), fontsize=10)
        figure_path = rootsavedir + 'attributes_diagram.png'
        plt.savefig(figure_path, bbox_inches='tight', dpi=200)
        plt.close()
        print('plotted attribute diagram at:', figure_path)
    if month_diagram:
        ##Initial plot formatting
        fig_width_cm = 20
        fig_height_cm = 20
        inches_per_cm = 1 / 2.54  # Convert cm to inches
        fig_width = fig_width_cm * inches_per_cm  # width in inches
        fig_height = fig_height_cm * inches_per_cm  # height in inches
        fig_size = [fig_width, fig_height]

        fig = plt.figure()
        fig.set_size_inches(fig_size)

        widths = [2]
        heights = [4, 4, 4, 4, 4]
        gs = gridspec.GridSpec(5, 1, wspace=0.1, hspace=0.3, width_ratios=widths, height_ratios=heights)
        axes = []
        num_axes = np.arange(0, 5, 1)
        regions = ['northwest', 'west', 'west_north_central', 'southwest', 'east_north_central', 'south', 'southeast', 'central', 'northeast', 'oconus']
        legend_key = ['Northwest', 'West', 'West North Central', 'Southwest', 'East North Central', 'South', 'Southeast',
                   'Central', 'Northeast', 'OCONUS']
        plot_keys = ['accuracy', 'precision', 'recall', 'specificity', 'csi']
        y_labels = ['Accuracy', 'Precision', 'Recall', 'Specificity', 'CSI']
        plot_limits = {'accuracy': np.arange(.7, 1.05, .1), 'precision': np.arange(0, 1.02, 0.2),
                       'recall': np.arange(0, .92, .2), 'specificity': np.arange(.8, 1.05, .1), 'csi':np.arange(0, .75, .2)}
        #title_string = 'Testing'
        for i in range(len(num_axes)):
            plot_val = plot_keys[i]
            ytick_vals = plot_limits[plot_val]
            for j in range(len(regions)):
                region = regions[j]
                x = dict_of_vals['months'][region]
                y = dict_of_vals[plot_val][region]
                color=dict_of_vals['colors'][region]
                if j == 0:
                    axes.append(fig.add_subplot(gs[num_axes[i]]))
                axes[-1].plot(x, y, color=color, marker='.', linestyle='solid', label=legend_key[j])
                axes[-1].set_ylabel(y_labels[i])
                if i == (len(num_axes) - 1):
                    # axes[-1].xaxis.set_major_formatter(md.DateFormatter('%H:%M'))
                    # plt.setp(axes[-1].get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')
                    axes[-1].set_xlabel('Month', labelpad=10)
                else:
                    axes[-1].xaxis.set_ticklabels([])
                    # if i == 0:
                    #     axes[-1].set_title(title_string, pad=10)
                    #     axes[-1].title.set_fontsize(14)
                    # if i == 1:
                    #     plt.axhline(convect_dbz, color='tab:brown', ls='--')
                # plt.xlim(datetime(2022, 7, 4, 15, 30), datetime(2022, 7, 4, 21, 30))
                # plt.axvline(lightning_time, color='tab:brown', ls='--')
            plt.yticks(ytick_vals)
            plt.grid()
        plt.legend(loc='center right',  bbox_to_anchor=(1.1, 1.05, 0.23, 0.04), fancybox=True, ncol=1) # left bottom width height
        figure_path = rootsavedir + 'region_by_month.png'
        plt.savefig(figure_path, bbox_inches='tight', dpi=200)
        print('plotted region by month diagram at:', figure_path)
